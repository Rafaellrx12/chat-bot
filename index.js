const qrcode = require('qrcode-terminal');
const fs = require('fs');
const { Client } = require('whatsapp-web.js');

function carregarCatalogo() {
  const data = fs.readFileSync('./catalogo.json', 'utf8');
  return JSON.parse(data);
}

const client = new Client();
const produtos = carregarCatalogo();

const ultimaInteracao = new Map(); // Guarda o √∫ltimo hor√°rio de intera√ß√£o de cada contato

const TEMPO_INATIVIDADE = 20 * 60 * 1000; // 20 minutos em milissegundos

client.on('qr', (qr) => {
  qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
  console.log('üõçÔ∏è Bot da Loja Online est√° pronto!');
});

client.on('message', async (message) => {
  const msg = message.body.toLowerCase().trim();
  const idContato = message.from;

  // Atualiza a hora da √∫ltima intera√ß√£o
  ultimaInteracao.set(idContato, Date.now());

  if (['menu', 'oi', 'ol√°'].includes(msg)) {
    await message.reply(
      'üëã Bem-vindo √† nossa loja!\n\n' +
      'Escolha uma op√ß√£o:\n' +
      '1Ô∏è‚É£ Ver produtos\n' +
      '2Ô∏è‚É£ Formas de pagamento\n' +
      '3Ô∏è‚É£ Ajuda'
    );
  }

  else if (msg === '1') {
    let texto = 'üõçÔ∏è *Nossos produtos:*\n\n';
    produtos.forEach((p, i) => {
      texto += `${i + 1}. ${p.nome} - R$${p.preco.toFixed(2)}\n`;
    });
    texto += '\nDigite o *nome do produto* para ver mais detalhes.';
    await message.reply(texto);
  }

  else if (msg === '2') {
    await message.reply(
      'üí≥ *Formas de pagamento*\n\n' +
      '‚úîÔ∏è Pix\n' +
      '‚úîÔ∏è Cart√£o de cr√©dito (at√© 3x sem juros)\n' +
      '‚úîÔ∏è Boleto banc√°rio\n\n' +
      'Mais informa√ß√µes: https://sualoja.com/pagamento'
    );
  }

  else if (msg === '3') {
    await message.reply(
      '‚ùì *Ajuda*\n\n' +
      'üîπ Digite *menu* para voltar ao in√≠cio\n' +
      'üîπ Digite *1* para ver os produtos\n' +
      'üîπ Digite o *nome de um produto* para ver detalhes\n' +
      'üîπ Digite *2* para ver formas de pagamento'
    );
  }

  else {
    const encontrado = produtos.find(p => msg.includes(p.nome.toLowerCase()));

    if (encontrado) {
      await message.reply(
        `üõí *${encontrado.nome}*\n\n` +
        `${encontrado.descricao}\n` +
        `üí∞ R$${encontrado.preco.toFixed(2)}\n` +
        `üõçÔ∏è Comprar agora: ${encontrado.link}`
      );
    } else {
      await message.reply(
        'ü§ñ N√£o entendi sua mensagem.\nDigite *menu* para ver as op√ß√µes.'
      );
    }
  }
});


setInterval(async () => {
  const agora = Date.now();

  for (const [idContato, ultimaHora] of ultimaInteracao.entries()) {
    if (agora - ultimaHora >= TEMPO_INATIVIDADE) {
      await client.sendMessage(idContato, '‚è∞ Sua sess√£o foi encerrada por inatividade.\n\nDigite *menu* para iniciar novamente.');
      ultimaInteracao.delete(idContato); // Remove para reiniciar nova sess√£o
    }
  }
}, 60 * 1000); // a cada minuto

client.initialize();
